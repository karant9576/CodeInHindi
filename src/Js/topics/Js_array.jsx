import { Box, Typography } from "@mui/material";

const Js_array = () => {
  return (
    <Box className="doc" sx={{ p: 2, maxWidth: 1000, mx: "auto", mt: -1 }}>
      <Typography variant="h5" gutterBottom fontWeight="bold" color="primary">
        JavaScript Arrays
      </Typography>

      <Typography paragraph>
        JavaScript ‡§Æ‡•á‡§Ç <strong>Array</strong> ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§è‡§ï ‡§π‡•Ä variable ‡§Æ‡•á‡§Ç multiple values ‡§ï‡•ã store ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
        ‡§Ø‡§π ‡§π‡§Æ‡•á‡§Ç ‡§è‡§ï compact structure ‡§Æ‡•á‡§Ç ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó types ‡§ï‡•Ä values ‡§ï‡•ã ‡§è‡§ï ‡§∏‡§æ‡§• manage ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography paragraph>
        JavaScript ‡§Æ‡•á‡§Ç Array declare ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§Ç data type specify ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•Ä ‡§π‡•à (‡§ú‡•à‡§∏‡•á Java ‡§Ø‡§æ C ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à)‡•§
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        üìò Syntax:
      </Typography>
      <Box sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }}>
        <Typography component="pre" sx={{ m: 0 }}>
{`let array1 = ['value1', 'value2', 12, 54.7];
let array2 = new Array('value1', 'value2', 12, 54.7);`}
        </Typography>
      </Box>

      <Typography paragraph mt={2}>
        ‡§Ü‡§™ ‡§â‡§™‡§∞‡•ã‡§ï‡•ç‡§§ ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡§ï‡•á array define ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        ‚úÖ Example: Array Declaration & Access
      </Typography>
      <Box sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }}>
        <Typography component="pre" sx={{ m: 0 }}>
{`<script>
  let array_var = [12, 34.5, true, false, "string value"];
  document.write(array_var);
</script>`}
        </Typography>
      </Box>

      <Typography paragraph mt={2}>
        JavaScript ‡§Æ‡•á‡§Ç Array ‡§ï‡•á values ‡§ï‡•ã access ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è index (0 ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç) ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        üîÑ Traversing Arrays
      </Typography>
      <Typography paragraph>
        JavaScript ‡§Æ‡•á‡§Ç array ‡§ï‡•ã iterate ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™ <code>for</code>, <code>for...in</code>, <code>for...of</code>, ‡§î‡§∞ <code>while</code> loops ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Box sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }}>
        <Typography component="pre" sx={{ m: 0 }}>
{`let array_var = [12, 34.5, true, false, "string value"];

// for loop
for (let i = 0; i < array_var.length; i++) {
  document.write("index " + i + ": " + array_var[i] + "<br>");
}

// for in loop
for (let index in array_var) {
  document.write("index " + index + ": " + array_var[index] + "<br>");
}

// for of loop
for (let value of array_var) {
  document.write(value + "<br>");
}

// while loop
let i = 0;
while (i < array_var.length) {
  document.write("index " + i + ": " + array_var[i] + "<br>");
  i++;
}`}
        </Typography>
      </Box>

      <Typography variant="h6" gutterBottom color="secondary" mt={1}>
        üìè Array Length
      </Typography>
      <Typography paragraph>
        <strong>length</strong> property ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó array ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡•á items ‡§π‡•à‡§Ç ‡§Ø‡•á ‡§ú‡§æ‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™ manually ‡§≠‡•Ä array ‡§ï‡•Ä length manipulate ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Box sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }}>
        <Typography component="pre" sx={{ m: 0 }}>
{`let array_var = [];
array_var[0] = "first value";
array_var[1] = "other value";
array_var[20] = "another value";

// Output
console.log(array_var);
console.log("Length:", array_var.length);

// Change length
array_var.length = 90;
console.log("New Length:", array_var.length);`}
        </Typography>
      </Box>

      <Typography paragraph mt={2}>
        ‡§ú‡§¨ ‡§Ü‡§™ ‡§¨‡•Ä‡§ö ‡§ï‡•á indexes ‡§ï‡•ã skip ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã JavaScript ‡§â‡§®‡•ç‡§π‡•á‡§Ç <em>empty</em> values ‡§∏‡•á fill ‡§ï‡§∞ ‡§¶‡•á‡§§‡•Ä ‡§π‡•à‡•§ ‡§î‡§∞ ‡§Ü‡§™ <code>length</code> manually ‡§¨‡§¢‡§º‡§æ‡§ï‡§∞ size ‡§≠‡•Ä control ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>
    </Box>
  );
};

export default Js_array;
