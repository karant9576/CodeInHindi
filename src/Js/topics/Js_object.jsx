import { Box, Typography } from "@mui/material";

const Js_object = () => {
  return (
    <Box sx={{ p: 2, maxWidth: 1000, mx: "auto" ,mt:'-1px'}}>
      <Typography variant="h5" fontWeight="bold" gutterBottom color="primary">
        JavaScript Objects
      </Typography>

      <Typography paragraph>
        Objects real-world entities ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡•à‡§∏‡•á ‚Äì Car, Bike, Human ‡§Ü‡§¶‡§ø‡•§ JavaScript ‡§Æ‡•á‡§Ç ‡§≠‡•Ä, ‡§¨‡§æ‡§ï‡•Ä languages ‡§ï‡•Ä ‡§§‡§∞‡§π, ‡§π‡§Æ Objects ‡§ï‡•ã define ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography paragraph>
        ‡§ú‡•à‡§∏‡•á ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä real-world entity ‡§ï‡•Ä ‡§ï‡•Å‡§õ properties (‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç) ‡§î‡§∞ ‡§ï‡•Å‡§õ behavior (‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞) ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç, ‡§µ‡•à‡§∏‡•á ‡§π‡•Ä programming ‡§Æ‡•á‡§Ç ‡§π‡§Æ ‡§â‡§®‡•ç‡§π‡•á‡§Ç variables ‡§î‡§∞ methods ‡§ï‡•á ‡§ú‡§º‡§∞‡§ø‡§è represent ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography variant="subtitle1" fontWeight="bold" gutterBottom color="secondary">
        üèçÔ∏è Bike Object ‚Äì Example:
      </Typography>

      <Typography component="div" sx={{ ml: 2 }}>
        <ul>
          <li><strong>Properties:</strong> name, weight, color, max_speed</li>
          <li><strong>Methods:</strong> start(), drive(), brake(), stop()</li>
        </ul>
      </Typography>

      <Typography paragraph>
        JavaScript ‡§Æ‡•á‡§Ç Objects ‡§¨‡§π‡•Å‡§§ important ‡§π‡•à‡§Ç, ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§ï‡•Å‡§õ primitives ‡§ï‡•ã ‡§õ‡•ã‡§°‡§º‡§ï‡§∞ ‡§¨‡§æ‡§ï‡•Ä ‡§∏‡§æ‡§∞‡•Ä values Objects ‡§π‡•Ä ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üß© Primitive Values ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç?
      </Typography>
      <Typography paragraph>
        Primitive values ‡§µ‡•ã ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç ‡§ú‡§ø‡§®‡§ï‡•Ä ‡§ï‡•ã‡§à properties ‡§Ø‡§æ methods ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•Ä‡§Ç‡•§
        JavaScript ‡§Æ‡•á‡§Ç 5 primitive types ‡§π‡•à‡§Ç:
      </Typography>

      <Typography component="ul" sx={{ pl: 3 }}>
        <li>string</li>
        <li>number</li>
        <li>boolean</li>
        <li>null</li>
        <li>undefined</li>
      </Typography>

      <Typography paragraph color="warning.main">
        ‚ö†Ô∏è Primitive values immutable ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç ‚Äì ‡§Ø‡§æ‡§®‡§ø ‡§á‡§®‡§ï‡•Ä actual value change ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•Ä‡•§  
        <br />
        ‡§ú‡•à‡§∏‡•á: <code>let x = 10;</code> ‚Üí ‡§Ø‡§π‡§æ‡§Å <code>x</code> ‡§ï‡•Ä value ‡§¨‡§¶‡§≤ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® 10 (primitive) ‡§ï‡•ã modify ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üìå In JavaScript, almost "everything" is an object:
      </Typography>

      <Typography component="ul" sx={{ pl: 3 }}>
        <li><code>new Boolean()</code>, <code>new Number()</code>, <code>new String()</code> ‚Üí Objects</li>
        <li><code>Date</code>, <code>Math</code>, <code>RegExp</code>, <code>Array</code>, <code>Function</code> ‚Üí all are objects</li>
      </Typography>

      <Typography paragraph mt={2}>
        Primitive variables ‡§∏‡§ø‡§∞‡•ç‡§´ single value contain ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç:<br />
        <code>let x = 10;</code>
      </Typography>

      <Typography paragraph>
        ‡§ú‡§¨‡§ï‡§ø Objects ‡§Æ‡•á‡§Ç multiple values store ‡§ï‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡§Ç ‚Äì key:value pair ‡§Æ‡•á‡§Ç:
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom>
        ‚úÖ JavaScript ‡§Æ‡•á‡§Ç Objects mutable ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç
      </Typography>
      <Typography paragraph>
        ‡§Ü‡§™ ‡§ï‡§≠‡•Ä ‡§≠‡•Ä Object ‡§Æ‡•á‡§Ç ‡§®‡§à property add ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§Ø‡§æ existing value ‡§ï‡•ã update ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom>
        üîπ Object Define ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á
      </Typography>

      <Typography paragraph>
        JavaScript ‡§Æ‡•á‡§Ç Object define ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¶‡•ã ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§§‡§∞‡•Ä‡§ï‡•á ‡§π‡•à‡§Ç:
      </Typography>

      <Typography component="ol" sx={{ pl: 3 }}>
        <li>Using curly braces <code>{`{}`}</code></li>
        <li>Using <code>new Object()</code> constructor</li>
      </Typography>

      <Typography variant="subtitle1" fontWeight="bold" gutterBottom color="secondary">
        üîß Example using both methods:
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1, overflowX: "auto" }}>
{`// Method 1: Using curly braces
let bike = {
  name: "TVS Apache",
  weight: "150kg",
  color: "White",
  max_speed: "110 to 160 km/h",
  start: function () {
    return "Bike start";
  }
};

// Method 2: Using new Object()
let bike = new Object();
bike.name = "TVS Apache";
bike.weight = "150kg";
bike.color = "White";
bike.max_speed = "110 to 160 km/h";
bike.start = function () {
  return "Bike start";
};`}
      </Typography>

      <Typography paragraph color="error" mt={2}>
        ‚ö†Ô∏è ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç: ‡§ï‡§≠‡•Ä ‡§≠‡•Ä predefined Objects ‡§ú‡•à‡§∏‡•á <code>String</code>, <code>Math</code>, <code>Array</code> ‡§ï‡•ã manually new keyword ‡§∏‡•á create ‡§® ‡§ï‡§∞‡•á‡§Ç ‚Äî ‡§Ø‡§π ‡§Ö‡§ö‡•ç‡§õ‡•Ä practice ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§
      </Typography>
    </Box>
  );
};

export default Js_object;
