import { Box, Typography } from "@mui/material";

const Js_inheritance = () => {
  return (
    <Box sx={{ p: 2, maxWidth: 1000, mx: "auto" , mt:'-1px'}}>
      <Typography variant="h5" fontWeight="bold" gutterBottom color="primary">
        JavaScript Inheritance
      </Typography>

      <Typography paragraph>
        ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä Object Oriented Programming (OOP) ‡§Æ‡•á‡§Ç <strong>Inheritance</strong> ‡§è‡§ï ‡§¨‡§π‡•Å‡§§ ‡§π‡•Ä important concept ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
        ‡§ú‡§¨ ‡§ï‡§ø‡§∏‡•Ä class ‡§ï‡•Ä properties ‡§Ø‡§æ behavior ‡§ï‡•ã ‡§¶‡•Ç‡§∏‡§∞‡•Ä class ‡§Æ‡•á‡§Ç extend ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡•á inheritance ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography paragraph>
        ‡§ú‡§ø‡§∏ class ‡§ï‡•ã extend ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§â‡§∏‡•á <strong>Parent/Base Class</strong> ‡§î‡§∞ ‡§ú‡•ã class extend ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à ‡§â‡§∏‡•á <strong>Child/Derived Class</strong> ‡§ï‡§π‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ JavaScript ‡§Æ‡•á‡§Ç inheritance ‡§ï‡•á ‡§≤‡§ø‡§è <code>extends</code> ‡§î‡§∞ <code>super()</code> ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üîπ JS Inheritance Example
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto'}}>
{`class A {
  prop_name = "property of class A";
  methodA() {
    return "method of class A";
  }
}

class B extends A {}

const inst = new B();
console.log(inst.prop_name);
console.log(inst.methodA());`}
      </Typography>

      <Typography paragraph>
        Output:
        <br />
        <code>property of class A</code>
        <br />
        <code>method of class A</code>
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üîπ Access Parent Members in Child Class
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto'}}>
{`class A {
  myproperty = "property of class A";
  method_a() {
    return "method of class A";
  }
}

class B extends A {
  show() {
    console.log(this.myproperty);
    console.log(this.method_a());
  }
}`}
      </Typography>

      <Typography paragraph>
        ‡§Ø‡§π‡§æ‡§Å <code>this</code> ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á parent class ‡§ï‡•Ä properties ‡§î‡§∞ methods ‡§ï‡•ã child class ‡§Æ‡•á‡§Ç access ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üîπ <code>super</code> Keyword
      </Typography>

      <Typography paragraph>
        <code>super</code> ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó parent class ‡§ï‡•á constructor ‡§Ø‡§æ methods ‡§ï‡•ã call ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto' }}>
{`class A {
  constructor() {
    console.log("Parent class constructor.");
  }

  method_a() {
    return "method of class A";
  }
}

class B extends A {
  constructor() {
    super(); // call parent constructor
    console.log("Child class constructor.");
  }

  show() {
    console.log(super.method_a());
  }
}

const inst = new B();
inst.show();`}
      </Typography>

      <Typography paragraph mt={2}>
        Output:
        <br />
        <code>Parent class constructor.</code><br />
        <code>Child class constructor.</code><br />
        <code>method of class A</code>
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üîπ Access Static Members of Parent Class
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto' }}>
{`class A {
  static myproperty = "static property of class A";
  static method_a() {
    return "static method of class A";
  }
}

class B extends A {
  show_A() {
    console.log(B.myproperty);
    console.log(B.method_a());
  }

  show_B() {
    console.log(A.myproperty);
    console.log(A.method_a());
  }
}

const inst = new B();
inst.show_A();
inst.show_B();`}
      </Typography>

      <Typography paragraph mt={2}>
        ‡§Ü‡§™ ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø static members ‡§ï‡•ã child class ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§≠‡•Ä access ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, ‡§Ø‡§æ directly parent class ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§≠‡•Ä‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üî∏ Important Notes:
      </Typography>
      <ul>
        <li>Static methods ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ <code>this</code> ‡§î‡§∞ <code>super</code> ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•á‡•§</li>
        <li>Non-static method ‡§Æ‡•á‡§Ç ‡§Ü‡§™ <code>this</code>, <code>super</code> ‡§Ø‡§æ class name ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§</li>
        <li>Parent class ‡§ï‡§æ constructor call ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è <code>super()</code> ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à, ‡§ñ‡§æ‡§∏‡§ï‡§∞ ‡§ú‡§¨ ‡§Ü‡§™ child class ‡§Æ‡•á‡§Ç constructor define ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§</li>
      </ul>

      <Typography mt={3}>
        üîö <strong>Conclusion:</strong> JavaScript ‡§Æ‡•á‡§Ç Inheritance ‡§ï‡•á ‡§ú‡§º‡§∞‡§ø‡§è ‡§Ü‡§™ code reuse ‡§î‡§∞ OOP concepts ‡§ï‡•ã implement ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ Class extend ‡§ï‡§∞‡§ï‡•á ‡§Ü‡§™ powerful ‡§î‡§∞ structured architecture ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>
    </Box>
  );
};

export default Js_inheritance;
