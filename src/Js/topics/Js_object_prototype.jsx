import { Box, Typography } from "@mui/material";

const Js_object_prototype = () => {
  return (
    <Box sx={{ p: 2, maxWidth: 1000, mx: "auto" , mt:'-1px' }}>
      <Typography variant="h5" fontWeight="bold" gutterBottom color="primary">
        JavaScript Object Prototype
      </Typography>

      <Typography paragraph>
        ‡§™‡§ø‡§õ‡§≤‡•á ‡§ü‡•â‡§™‡§ø‡§ï ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§®‡•á ‡§∏‡•Ä‡§ñ‡§æ ‡§ï‡§ø ‡§ï‡•à‡§∏‡•á ‡§π‡§Æ Object constructor ‡§Æ‡•á‡§Ç properties ‡§î‡§∞ methods ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§≤‡•á‡§ï‡§ø‡§® ‡§µ‡§π‡§æ‡§Å methods ‡§ï‡•ã constructor function ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ add ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§µ‡•ã ‡§∏‡§ø‡§∞‡•ç‡§´ constructor ‡§∏‡•á ‡§π‡•Ä accessible ‡§π‡•ã‡§§‡•á ‡§•‡•á, object instance ‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        ‚ùå Constructor ‡§∏‡•á Method Add ‡§ï‡§∞‡§®‡§æ (‡§ó‡§≤‡§§ ‡§§‡§∞‡•Ä‡§ï‡§æ)
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto'}}>
{`function Person(first, last) {
  this.first_name = first;
  this.last_name = last;
}

// method constructor function ‡§™‡§∞ add ‡§ï‡•Ä
Person.full_name = function(){
  return "return function";
};

// ‡§Ø‡§π ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ
Person.full_name();

// ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ø‡§π ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§ó‡§æ
let my_friend = new Person("Karan", "Thakur");
my_friend.full_name(); // ‚ùå Error`}
      </Typography>

      <Typography paragraph mt={2}>
        ‡§á‡§∏‡•Ä ‡§§‡§∞‡§π, ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä ‡§è‡§ï object ‡§™‡§∞ ‡§π‡•Ä method define ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§µ‡§π method ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§â‡§∏‡•Ä object ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•ã‡§ó‡§æ‡•§ ‡§¶‡•Ç‡§∏‡§∞‡•á objects ‡§ï‡•ã ‡§µ‡§π method ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        ‚ùå Method ‡§ï‡•á‡§µ‡§≤ ‡§è‡§ï object ‡§ï‡•á ‡§≤‡§ø‡§è (‡§ó‡§≤‡§§ ‡§§‡§∞‡•Ä‡§ï‡§æ)
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto' }}>
{`let my_friend1 = new Person("Karan", "Thakur");

my_friend1.full_name = function(){
  return this.first_name + " " + this.last_name;
};

my_friend1.full_name(); // ‚úÖ

let my_friend2 = new Person("Karandeep", "Singh");
my_friend2.full_name(); // ‚ùå Error`}
      </Typography>

      <Typography paragraph mt={2}>
        ‡§á‡§∏ ‡§§‡§∞‡§π ‡§ï‡•Ä limitation ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, JavaScript ‡§Æ‡•á‡§Ç ‡§π‡§Æ <strong>prototype</strong> ‡§ï‡§æ use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ Prototype ‡§∏‡•á method add ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§µ‡§π ‡§∏‡§≠‡•Ä objects ‡§Æ‡•á‡§Ç automatically available ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        ‚úÖ Prototype ‡§ï‡•á ‡§ú‡§∞‡§ø‡§è Method Add ‡§ï‡§∞‡§®‡§æ (‡§∏‡§π‡•Ä ‡§§‡§∞‡•Ä‡§ï‡§æ)
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto'}}>
{`function Person(first, last) {
  this.first_name = first;
  this.last_name = last;
}

// method ‡§ï‡•ã prototype ‡§™‡§∞ define ‡§ï‡§∞‡•á‡§Ç
Person.prototype.full_name = function() {
  return this.first_name + " " + this.last_name;
};

let my_friend1 = new Person("Karan", "Thakur");
document.writeln(my_friend1.full_name()); // ‚úÖ

let my_friend2 = new Person("Karandeep", "Singh");
document.writeln(my_friend2.full_name()); // ‚úÖ`}
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom mt={2} color="secondary">
        ‚ÑπÔ∏è Prototype ‡§∏‡•á Inheritance
      </Typography>
      <Typography paragraph>
        JavaScript ‡§Æ‡•á‡§Ç <code>prototype</code> ‡§è‡§ï ‡§ê‡§∏‡•Ä mechanism ‡§π‡•à ‡§ú‡§ø‡§∏‡§∏‡•á objects ‡§è‡§ï-‡§¶‡•Ç‡§∏‡§∞‡•á ‡§∏‡•á methods ‡§î‡§∞ properties ‡§ï‡•ã inherit ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography component="ul" sx={{ pl: 3 }}>
        <li><code>Date</code> objects inherit from <code>Date.prototype</code></li>
        <li><code>Array</code> objects inherit from <code>Array.prototype</code></li>
        <li>‡§Ü‡§™‡§ï‡§æ custom object inherit ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§â‡§∏‡§ï‡•á constructor ‡§ï‡•á <code>prototype</code> ‡§∏‡•á</li>
      </Typography>

      <Typography paragraph>
        ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä object ‡§ï‡•ã console ‡§Æ‡•á‡§Ç print ‡§ï‡§∞‡§ï‡•á ‡§â‡§∏‡§ï‡§æ prototype structure ‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§∏‡•á ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography variant="body2" color="textSecondary">
        üîë Summary: Prototype ‡§ï‡•á ‡§ú‡§º‡§∞‡§ø‡§è method define ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§Ü‡§™ DRY (Don't Repeat Yourself) principle ‡§ï‡•ã follow ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ memory efficient code ‡§≤‡§ø‡§ñ‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>
    </Box>
  );
};

export default Js_object_prototype;
