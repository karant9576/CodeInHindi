import { Box, Typography } from "@mui/material";

const Js_object_accessors = () => {
  return (
    <Box sx={{ p: 2, maxWidth: 1000, mx: "auto", mt:'-1px' }}>
      <Typography variant="h5" fontWeight="bold" gutterBottom color="primary">
        JavaScript Object Accessors (getters & setters)
      </Typography>

      <Typography paragraph>
        JavaScript ‡§Æ‡•á‡§Ç <strong>Accessors</strong> ‡§ê‡§∏‡•Ä properties ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç ‡§ú‡•ã object methods ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡§Ç‡•§ ‡§á‡§®‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§∏‡•Ä value ‡§ï‡•ã <code>get</code> ‡§Ø‡§æ <code>set</code> ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
        <br />
        - <strong>get</strong>: ‡§ï‡§ø‡§∏‡•Ä value ‡§ï‡•ã read ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è <br />
        - <strong>set</strong>: ‡§ï‡§ø‡§∏‡•Ä value ‡§ï‡•ã assign ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
      </Typography>

      <Typography paragraph>
        Accessors ‡§ï‡•ã JavaScript ‡§Æ‡•á‡§Ç ECMAScript 5 (2009) ‡§Æ‡•á‡§Ç introduce ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§•‡§æ‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üîß Accessor Example:
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1, overflowX: "auto" }}>
{`var person = {
  full_name: null,

  // Setter
  set set_name(name) {
    this.full_name = name;
  },

  // Getter
  get get_name() {
    return this.full_name;
  }
};

person.set_name = "Karan Thakur";
document.write(person.get_name);`}
      </Typography>

      <Typography paragraph mt={2}>
        ‡§ä‡§™‡§∞ ‡§¶‡§ø‡§è ‡§ó‡§è ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§π‡§Æ‡§®‡•á <code>set_name</code> ‡§ï‡•á ‡§ú‡§º‡§∞‡§ø‡§è value assign ‡§ï‡•Ä ‡§î‡§∞ <code>get_name</code> ‡§∏‡•á value ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡•Ä‡•§
        Accessors ‡§ï‡•ã ‡§Ü‡§™ dot notation (‡§ú‡•à‡§∏‡•á: <code>person.get_name</code>) ‡§Ø‡§æ bracket notation (‡§ú‡•à‡§∏‡•á: <code>person["get_name"]</code>) ‡§∏‡•á access ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        ‚öñÔ∏è Method vs Getter/Setter
      </Typography>
      <Typography paragraph>
        <strong>Methods:</strong> function ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡§ø‡§®‡•ç‡§π‡•á‡§Ç execute ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è parentheses <code>()</code> ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§
        <br />
        <strong>Accessors:</strong> properties ‡§ï‡•Ä ‡§§‡§∞‡§π access ‡§ï‡§ø‡§è ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç, parentheses ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•Ä‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom>
        ‚ùå Accessor Delete ‡§ï‡§∞‡§®‡§æ
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 }}>
{`delete person.set_name;
delete person.get_name;`}
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom mt={2}>
        ‚ûï defineProperty() ‡§∏‡•á Accessor ‡§ú‡•ã‡§°‡§º‡§®‡§æ
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto'}}>
{`var person = { full_name: null };

// Add setter
Object.defineProperty(person, 'set_name', {
  set: function(name) {
    this.full_name = name;
  }
});

// Add getter
Object.defineProperty(person, 'get_name', {
  get: function() {
    return this.full_name;
  }
});

person.set_name = "Karan Thakur";
document.write(person.get_name);`}
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom mt={2}>
        ‚úÖ Accessors ‡§ï‡•á ‡§´‡§æ‡§Ø‡§¶‡•á
      </Typography>

      <Typography component="ul" sx={{ pl: 3 }}>
        <li>Simple syntax</li>
        <li>Objects ‡§ï‡•ã manage ‡§ï‡§∞‡§®‡§æ ‡§Ü‡§∏‡§æ‡§®</li>
        <li>Method ‡§î‡§∞ Property ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è uniform interface</li>
        <li>Better data validation & encapsulation</li>
        <li>Readable & maintainable code</li>
      </Typography>
    </Box>
  );
};

export default Js_object_accessors;
