import { Box, Typography } from "@mui/material";

const Js_for_of_loop = () => {
  return (
    <Box className="doc" sx={{ p: 2, maxWidth: 1000, mx: "auto", marginTop: "-1px"}}>
      <Typography variant="h5" gutterBottom fontWeight="bold" color="primary">
        JavaScript for of Loop
      </Typography>

      <Typography paragraph>
        ‡§™‡§ø‡§õ‡§≤‡•á topic ‡§Æ‡•á‡§Ç ‡§π‡§Æ‡§®‡•á <strong>for...in loop</strong> ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•ù‡§æ ‡§•‡§æ, ‡§ú‡§ø‡§∏‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§∏‡•Ä object ‡§ï‡•Ä <strong>property keys</strong> ‡§ï‡•ã iterate ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§ú‡§¨‡§ï‡§ø <strong>for...of loop</strong> ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó <strong>iterable objects</strong> (‡§ú‡•à‡§∏‡•á array, string, map, set) ‡§ï‡•Ä <strong>values</strong> ‡§ï‡•ã iterate ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography paragraph>
        ‡§Ø‡§π loop built-in structures ‡§ú‡•à‡§∏‡•á String, Array, Map, Set ‡§î‡§∞ user-defined iterables ‡§ï‡•ã ‡§≠‡•Ä support ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        üîÅ Syntax
      </Typography>
      <Typography sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre'}} >
{`for (const val of iterable) {
  // logic here
}`}
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        üîç For...of vs For...in vs For Loop
      </Typography>
      <Typography paragraph>
        - <strong>for...of</strong>: iterable values ‡§ï‡•ã iterate ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
        <br />- <strong>for...in</strong>: object keys ‡§ï‡•ã iterate ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
        <br />- <strong>for loop</strong>: traditional counting logic ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        ‚úÖ Example: Iterate over String
      </Typography>
      <Typography sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }} >
{`let string = new String("Welcome");
for (let val of string) {
  document.write(\`value: \${val} <br>\`);
}`}
      </Typography>

      <Typography paragraph mt={2}>
        ‡§á‡§∏ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§Æ‡•á‡§Ç string object ‡§ï‡•ã iterate ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à ‡§î‡§∞ ‡§π‡§∞ character ‡§ï‡•ã individually print ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        ‚úÖ Example: Iterate over Array
      </Typography>
      <Typography sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre'}} >
{`let array_var = [12, 34, 56, 'strin', true];
for (let val of array_var) {
  document.write(\`value: \${val} <br>\`);
}`}
      </Typography>

      <Typography paragraph mt={2}>
        ‡§á‡§∏ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§è‡§ï array ‡§ï‡•ã <code>for...of</code> loop ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á iterate ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ Array ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® types ‡§ï‡•Ä values store ‡§•‡•Ä‡§Ç ‡§ú‡§ø‡§®‡•ç‡§π‡•á‡§Ç sequentially access ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§
      </Typography>
    </Box>
  );
};

export default Js_for_of_loop;
