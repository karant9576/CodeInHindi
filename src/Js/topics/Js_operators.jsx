import { Box, Typography } from "@mui/material";

const Js_operators = () => {
  return (
    <Box sx={{ p: 2, maxWidth: 1000, mx: "auto" , marginTop:"-1px", }}>
      <Typography variant="h5" gutterBottom fontWeight="bold" color="primary">
        JavaScript Operators
      </Typography>

      <Typography paragraph>
        Operator ‡§è‡§ï symbol ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§ú‡•ã ‡§ï‡§ø‡§∏‡•Ä operation ‡§ï‡•ã perform ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
        JavaScript ‡§Æ‡•á‡§Ç ‡§ï‡§à ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á operators ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç:
        <br /><br />
        ‚Ä¢ Arithmetic Operators<br />
        ‚Ä¢ Assignment Operators<br />
        ‚Ä¢ Comparison Operators<br />
        ‚Ä¢ Increment/Decrement Operators<br />
        ‚Ä¢ Logical Operators<br />
        ‚Ä¢ Conditional (Ternary) Operator
      </Typography>

      {/* Arithmetic Operators */}
      <Typography variant="subtitle1" gutterBottom color="secondary">Arithmetic Operators</Typography>
      <Typography fontStyle="italic" mb={1}>
        ‡§Ø‡•á operators ‡§ó‡§£‡§®‡§æ‡§è‡§Å (‡§ú‡•à‡§∏‡•á ‡§ú‡•ã‡§°‡§º, ‡§ò‡§ü‡§æ‡§µ, ‡§ó‡•Å‡§£‡§æ, ‡§≠‡§æ‡§ó) ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>
      <pre>
{`+  Addition         x + y
-  Subtraction      x - y
*  Multiplication   x * y
/  Division         x / y
%  Modulus          x % y
** Exponentiation   x ** y`}
      </pre>
      <Typography paragraph bgcolor={'#8CCDEB'} p={2} borderRadius={2} mt={2}>
        <strong>‡§â‡§¶‡§æ‡§π‡§∞‡§£:</strong><br />
        <code>
          let a = 10, b = 2;<br />
          console.log(a + b); // 12<br />
          console.log(a * b); // 20<br />
          console.log(a ** b); // 100
        </code>
      </Typography>

      {/* Assignment Operators */}
      <Typography variant="subtitle1" gutterBottom color="secondary">Assignment Operators</Typography>
      <Typography fontStyle="italic" mb={1}>
        ‡§Ø‡•á operators ‡§ï‡§ø‡§∏‡•Ä variable ‡§ï‡•ã value assign ‡§ï‡§∞‡§®‡•á ‡§î‡§∞ ‡§â‡§∏‡•á modify ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>
      <pre>
{`=   Assign             x = y
+=  Add & Assign        x += y
-=  Subtract & Assign   x -= y
*=  Multiply & Assign   x *= y
/=  Divide & Assign     x /= y
%=  Modulus & Assign    x %= y`}
      </pre>
      <Typography paragraph bgcolor={'#8CCDEB'} p={2} borderRadius={2} mt={2}>
        <strong>‡§â‡§¶‡§æ‡§π‡§∞‡§£:</strong><br />
        <code>
          let x = 5;<br />
          x += 3; // x = 8<br />
          x *= 2; // x = 16
        </code>
      </Typography>

      {/* Comparison Operators */}
      <Typography variant="subtitle1" gutterBottom color="secondary">Comparison Operators</Typography>
      <Typography fontStyle="italic" mb={1}>
        ‡§Ø‡•á ‡§¶‡•ã values ‡§ï‡•ã compare ‡§ï‡§∞‡§ï‡•á true ‡§Ø‡§æ false return ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>
      <pre>
{`==   Equal to (value)
===  Equal value & type
!=   Not equal (value)
!==  Not equal (value or type)
<    Less than
>    Greater than
<=   Less than or equal to
>=   Greater than or equal to`}
      </pre>
      <Typography paragraph bgcolor={'#8CCDEB'} p={2} borderRadius={2} mt={2}>
        <strong>‡§â‡§¶‡§æ‡§π‡§∞‡§£:</strong><br />
        <code>
          let a = 5, b = '5';<br />
          console.log(a == b);  // true<br />
          console.log(a === b); // false
        </code>
      </Typography>

      {/* Increment / Decrement */}
      <Typography variant="subtitle1" gutterBottom color="secondary">Increment / Decrement Operators</Typography>
      <Typography fontStyle="italic" mb={1}>
        ‡§ï‡§ø‡§∏‡•Ä variable ‡§ï‡•á value ‡§ï‡•ã 1 ‡§∏‡•á ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§Ø‡§æ ‡§ò‡§ü‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§® operators ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
      </Typography>
      <pre>
{`++x  Pre-Increment
x++  Post-Increment
--x  Pre-Decrement
x--  Post-Decrement`}
      </pre>
      <Typography paragraph bgcolor={'#8CCDEB'} p={2} borderRadius={2} mt={2}>
        <strong>‡§â‡§¶‡§æ‡§π‡§∞‡§£:</strong><br />
        <code>
          let a = 5;<br />
          console.log(++a); // 6<br />
          console.log(a++); // 6<br />
          console.log(a);   // 7
        </code>
      </Typography>

      {/* Logical Operators */}
      <Typography variant="subtitle1" gutterBottom color="secondary">Logical Operators</Typography>
      <Typography fontStyle="italic" mb={1}>
        ‡§Ø‡•á multiple conditions ‡§ï‡•ã check ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ boolean result return ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>
      <pre>
{`&&  And   (‡§¶‡•ã‡§®‡•ã‡§Ç true ‡§π‡•ã‡§®‡•á ‡§™‡§∞ true)
||  Or    (‡§ï‡•ã‡§à ‡§è‡§ï true ‡§π‡•ã ‡§§‡•ã true)
!   Not   (true ‡§ï‡•ã false ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à)`}
      </pre>
      <Typography mt={2}>
        üëâ ‡§Ö‡§ó‡§∞ value true ‡§π‡•à ‡§§‡•ã ! ‡§â‡§∏‡•á false ‡§¨‡§®‡§æ ‡§¶‡•á‡§ó‡§æ
        üëâ ‡§Ö‡§ó‡§∞ value false ‡§π‡•à ‡§§‡•ã ! ‡§â‡§∏‡•á true ‡§¨‡§®‡§æ ‡§¶‡•á‡§ó‡§æ
      </Typography>
      <Typography paragraph bgcolor={'#8CCDEB'} p={2} borderRadius={2} mt={2}>
        <strong>‡§â‡§¶‡§æ‡§π‡§∞‡§£:</strong><br />
        <code>
          let a = true, b = false;<br />
          console.log(a && b); // false<br />
          console.log(a || b); // true<br />
          console.log(!a);     // false
        </code>
      </Typography>

      {/* Conditional / Ternary */}
      <Typography variant="subtitle1" gutterBottom color="secondary">Conditional (Ternary) Operator</Typography>
      <Typography fontStyle="italic" mb={1}>
        ‡§Ø‡•á shorthand if-else ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‚Äî ‡§è‡§ï condition ‡§ï‡•ã check ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§â‡§∏‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ result return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
      </Typography>
      <pre>
{`condition ? expr1 : expr2`}
      </pre>
      <Typography paragraph bgcolor={'#8CCDEB'} p={2} borderRadius={2} mt={2}>
        <strong>‡§â‡§¶‡§æ‡§π‡§∞‡§£:</strong><br />
        <code>
          let age = 20;<br />
          let result = age &gt;= 18 ? "Eligible" : "Not eligible";<br />
          console.log(result); // "Eligible"
        </code>
      </Typography>
    </Box>
  );
};

export default Js_operators;
