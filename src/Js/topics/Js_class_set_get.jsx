import { Box, Typography } from "@mui/material";

const Js_class_set_get = () => {
  return (
    <Box sx={{ p: 2, maxWidth: 1000, mx: "auto" , mt:'-1px'}}>
      <Typography variant="h5" fontWeight="bold" gutterBottom color="primary">
        JavaScript Class Setter ‡§î‡§∞ Getter
      </Typography>

      <Typography paragraph mt={2}>
        ‡§µ‡•à‡§∏‡•á ‡§§‡•ã JavaScript classes ‡§Æ‡•á‡§Ç ‡§π‡§Æ methods ‡§ï‡•ã define ‡§î‡§∞ call ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§≤‡•á‡§ï‡§ø‡§® methods ‡§ï‡•ã ‡§î‡§∞ ‡§¨‡•á‡§π‡§§‡§∞ ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á manage ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è <strong>setter</strong> ‡§î‡§∞ <strong>getter</strong> methods ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography paragraph>
        ‡§á‡§®‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø code ‡§ï‡•ã <em>clean</em>, <em>standardized</em> ‡§î‡§∞ <em>safe</em> ‡§¨‡§®‡§æ‡§®‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
        ‡§ú‡§¨‡§ï‡§ø Java / C++ ‡§ú‡•à‡§∏‡•Ä languages ‡§Æ‡•á‡§Ç setters ‡§î‡§∞ getters ‡§ï‡§æ use encapsulation ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, JavaScript ‡§Æ‡•á‡§Ç ‡§á‡§®‡•ç‡§π‡•á‡§Ç data access ‡§ï‡•ã control ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography paragraph>
        ‡§π‡§æ‡§≤‡§æ‡§Å‡§ï‡§ø JavaScript ‡§Æ‡•á‡§Ç encapsulation ‡§ï‡•ã ‡§∏‡•Ä‡§ß‡•á support ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§π‡§Æ closures ‡§Ø‡§æ private naming conventions (‡§ú‡•à‡§∏‡•á ‡§ï‡§ø underscore `_`) ‡§ï‡§æ use ‡§ï‡§∞‡§ï‡•á ‡§á‡§∏‡•á achieve ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üîπ Example: Using Getters and Setters
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto' }}>
{`class Circle {
  constructor(radius) {
    this._radius = radius; // private-like property
  }

  // Getter for radius
  get radius() {
    return this._radius;
  }

  // Setter for radius
  set radius(newRadius) {
    if (newRadius >= 0) {
      this._radius = newRadius;
    } else {
      console.log("Radius cannot be negative.");
    }
  }

  // Getter for area
  get area() {
    return Math.PI * this._radius * this._radius;
  }
}`}
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary" mt={2}>
        üîπ Explanation
      </Typography>

      <Typography component="ul" sx={{ pl: 3 }}>
        <li><strong>get radius()</strong>: radius ‡§ï‡•ã safely return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§</li>
        <li><strong>set radius(newRadius)</strong>: new radius ‡§ï‡•ã set ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ negative value ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§∞‡•ã‡§ï‡§§‡§æ ‡§π‡•à‡•§</li>
        <li><strong>get area()</strong>: circle ‡§ï‡§æ area calculate ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§</li>
        <li><strong>_radius</strong>: ‡§è‡§ï convention ‡§π‡•à ‡§ú‡•ã ‡§¶‡§∞‡•ç‡§∂‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ø‡§π property "private" ‡§π‡•à‡•§</li>
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom mt={1} color="secondary">
        üîπ Usage Example
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto'}}>
{`const circle = new Circle(5);

console.log(circle.radius); // Output: 5
console.log(circle.area);   // Output: 78.53981633974483

circle.radius = 7;
console.log(circle.radius); // Output: 7

circle.radius = -2;         // Output: Radius cannot be negative.
console.log(circle.radius); // Output: 7`}
      </Typography>

      <Typography paragraph mt={2}>
        ‡§á‡§∏ ‡§§‡§∞‡§π ‡§∏‡•á getter ‡§î‡§∞ setter methods ‡§Ü‡§™‡§ï‡•ã controlled access ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡§ø‡§∏‡§∏‡•á ‡§Ü‡§™ validation, formatting ‡§Ø‡§æ encapsulation ‡§ú‡•à‡§∏‡•Ä ‡§ö‡•Ä‡§ú‡•ã‡§Ç ‡§ï‡•ã apply ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>
    </Box>
  );
};

export default Js_class_set_get;
