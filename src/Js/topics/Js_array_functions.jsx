import { Box, Typography } from "@mui/material";

const Js_array_functions = () => {
  return (
    <Box className="doc" sx={{ p: 2, maxWidth: 1000, mx: "auto", mt: -1 }}>
      <Typography variant="h5" gutterBottom fontWeight="bold" color="primary">
        JavaScript Array Functions
      </Typography>

      <Typography paragraph>
        JavaScript ‡§π‡§Æ‡•á‡§Ç ‡§ï‡§à ‡§∏‡§æ‡§∞‡•á array functions provide ‡§ï‡§∞‡§æ‡§§‡•Ä ‡§π‡•à ‡§ú‡§ø‡§®‡§ï‡•Ä help ‡§∏‡•á ‡§π‡§Æ Array ‡§ï‡•ã create, update, merge ‡§î‡§∞ manipulate ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography paragraph>
        ‡§ï‡•Å‡§õ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ array functions ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§π‡•à‡§Ç:
        <br />
             <ol>
  <li><code>Array.isArray()</code></li>
  <li><code>indexOf()</code></li>
  <li><code>map()</code></li>
  <li><code>sort()</code></li>
  <li><code>toString()</code></li>
  <li><code>push()</code></li>
  <li><code>unshift()</code></li>
  <li><code>pop()</code></li>
  <li><code>shift()</code></li>
</ol>
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        ‚úÖ Array.isArray()
      </Typography>
      <Typography paragraph>
        ‡§Ø‡§π function ‡§ö‡•á‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§¶‡•Ä ‡§ó‡§à value ‡§è‡§ï array ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§
      </Typography>
      <Box sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }}>
        <Typography component="pre" sx={{ m: 0 }}>
{`Array.isArray([12, 45, 67]); // true
Array.isArray('string');      // false`}
        </Typography>
      </Box>

      <Typography variant="h6" gutterBottom color="secondary">
        üîç indexOf()
      </Typography>
      <Typography paragraph>
        ‡§Ø‡§π function array ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§∏‡•Ä value ‡§ï‡•Ä index return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§î‡§∞ ‡§Ö‡§ó‡§∞ value ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã -1 return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
      </Typography>
      <Box sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }}>
        <Typography component="pre" sx={{ m: 0 }}>
{`let arr = [23, 56, 'Rohit'];
arr.indexOf('Rohti');  // 2
arr.indexOf('rohit');  // -1`}        </Typography>
      </Box>

      <Typography variant="h6" gutterBottom color="secondary">
        üîÑ map()
      </Typography>
      <Typography paragraph>
        ‡§Ø‡§π function array ‡§ï‡•á ‡§π‡§∞ ‡§è‡§ï element ‡§™‡§∞ operation perform ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
      </Typography>
      <Box sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }}>
        <Typography component="pre" sx={{ m: 0 }}>
{`let arr = [1, 2, 3];
let doubled = arr.map(x => x * 2);
console.log(doubled); // [2, 4, 6]`}
        </Typography>
      </Box>

      <Typography variant="h6" gutterBottom color="secondary">
        üî¢ sort()
      </Typography>
      <Typography paragraph>
        ‡§Ø‡§π function array ‡§ï‡•ã alphabetically ‡§Ø‡§æ numeric ascending order ‡§Æ‡•á‡§Ç sort ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
      </Typography>
      <Box sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }}>
        <Typography component="pre" sx={{ m: 0 }}>
{`let names = ['John', 'Mohit', 'Karan'];
names.sort(); // ['John', 'Mohit', 'Karan']`}
        </Typography>
      </Box>

      <Typography variant="h6" gutterBottom color="secondary">
        üî§ toString()
      </Typography>
      <Typography paragraph>
        ‡§Ø‡§π function array ‡§ï‡•ã string ‡§Æ‡•á‡§Ç convert ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ elements ‡§ï‡•ã comma ‡§∏‡•á separate ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
      </Typography>
      <Box sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }}>
        <Typography component="pre" sx={{ m: 0 }}>
{`let arr = ['a', 'b', 'c'];
arr.toString(); // "a,b,c"`}
        </Typography>
      </Box>

      <Typography variant="h6" gutterBottom color="secondary">
        ‚ûï push()
      </Typography>
      <Typography paragraph>
        ‡§Ø‡§π function value ‡§ï‡•ã array ‡§ï‡•á end ‡§Æ‡•á‡§Ç add ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        ‚¨ÖÔ∏è unshift()
      </Typography>
      <Typography paragraph>
        ‡§Ø‡§π function value ‡§ï‡•ã array ‡§ï‡•á start ‡§Æ‡•á‡§Ç add ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        ‚ûñ pop()
      </Typography>
      <Typography paragraph>
        ‡§Ø‡§π function array ‡§ï‡•á last element ‡§ï‡•ã remove ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography variant="h6" gutterBottom color="secondary">
        ‚ûñ shift()
      </Typography>
      <Typography paragraph>
        ‡§Ø‡§π function array ‡§ï‡•á first element ‡§ï‡•ã remove ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
      </Typography>

      <Typography paragraph>
        <strong>‡§®‡•ã‡§ü:</strong> JavaScript ‡§Æ‡•á‡§Ç <code>length</code> ‡§è‡§ï property ‡§π‡•ã‡§§‡•Ä ‡§π‡•à ‡§ú‡•ã array ‡§Æ‡•á‡§Ç ‡§Æ‡•å‡§ú‡•Ç‡§¶ elements ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ return ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§
      </Typography>
    </Box>
  );
};

export default Js_array_functions;
