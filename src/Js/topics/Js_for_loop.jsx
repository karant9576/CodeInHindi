import { Box, Typography } from "@mui/material";

const Js_for_loop = () => {
  return (
    <Box className="doc" sx={{p: 2, maxWidth: 1000, mx: "auto", marginTop: "-1px"   }}>
      <Box>
        <Typography variant="h5" gutterBottom color="primary" fontWeight="bold">
          JavaScript For Loop
        </Typography>

        <Typography paragraph>
          рдХрд┐рд╕реА code block рдХреЛ рдмрд╛рд░-рдмрд╛рд░ run рдХрд░рдиреЗ рдХрд╛ рд╕рдмрд╕реЗ рдЖрд╕рд╛рди рддрд░реАрдХрд╛ looping рд╣реЛрддрд╛ рд╣реИред <strong>while</strong> рдпрд╛ <strong>do while</strong> рдореЗрдВ рд╣рдо 3 steps follow рдХрд░рддреЗ рд╣реИрдВ:
        </Typography>

        <Box sx={{ ml: 2, mb: 2 }}>
          тБШ Initialization <br />
          тБШ Condition <br />
          тБШ Increment / Decrement
        </Box>

        <Typography paragraph>
          рдЬрдмрдХрд┐ рдЗрди рддреАрдиреЛрдВ рдХреЛ <strong>for loop</strong> рдореЗрдВ рдПрдХ рд╣реА рдЬрдЧрд╣ define рдХрд░ рджрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, рдЬрд┐рд╕рд╕реЗ рдХреЛрдб рдЫреЛрдЯрд╛ рдФрд░ рд╕реНрдкрд╖реНрдЯ рдмрдирддрд╛ рд╣реИред
        </Typography>

        <Typography paragraph>
          <strong>For Loop</strong> рдХрд╛ рдЙрдкрдпреЛрдЧ рддрдм рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдЬрдм рд╣рдореЗрдВ рдкрд╣рд▓реЗ рд╕реЗ рдкрддрд╛ рд╣реЛ рдХрд┐ loop рдХрд┐рддрдиреА рдмрд╛рд░ рдЪрд▓реЗрдЧрд╛ред рдпрд╣реА рдЗрд╕рдХрд╛ рдореБрдЦреНрдп рдЕрдВрддрд░ рд╣реИ <strong>while</strong> loop рдХреА рддреБрд▓рдирд╛ рдореЗрдВред
        </Typography>

        <Typography variant="h6" gutterBottom color="secondary">
          ЁЯФБ Syntax
        </Typography>

        <Typography sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre'}} >
{`for(initialization ; condition ; increment / decrement) {
  // code block
}`}
        </Typography>

        <Typography paragraph mt={2}>
          For loop рдХреЗ рддреАрди expressions рдЗрд╕ рддрд░рд╣ рдХрд╛рдо рдХрд░рддреЗ рд╣реИрдВ:
        </Typography>

        <Box sx={{ ml: 2, mb: 2 }}>
          тБШ <strong>Initialization:</strong> Loop рд╢реБрд░реВ рд╣реЛрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдПрдХ рдмрд╛рд░ execute рд╣реЛрддрд╛ рд╣реИ (e.g. <code>let x = 0</code>)<br />
          тБШ <strong>Condition:</strong> рд╣рд░ iteration рд╕реЗ рдкрд╣рд▓реЗ check рд╣реЛрддреА рд╣реИ тАФ true рд╣реЛрдиреЗ рдкрд░ loop рдЪрд▓реЗрдЧрд╛<br />
          тБШ <strong>Increment/Decrement:</strong> рд╣рд░ iteration рдХреЗ рдЕрдВрдд рдореЗрдВ execute рд╣реЛрддрд╛ рд╣реИ<br />
        </Box>

        <Typography paragraph>
          рддреАрд╕рд░рд╛ expression optional рд╣реИ тАФ рдЖрдк variable рдХреЛ loop block рдХреЗ рдЕрдВрджрд░ рднреА рдмрдврд╝рд╛/рдШрдЯрд╛ рд╕рдХрддреЗ рд╣реИрдВред
        </Typography>

        <Typography variant="h6" gutterBottom color="secondary">
          ЁЯУМ Example: Table of 5
        </Typography>

        <Typography sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }} >
{`let number = 5;
for(let x = 1; x <= 10; x++) {
  document.write(number + ' x ' + x + ' = ' + (x * number) + '<br>');
}`}
        </Typography>

        <Typography paragraph mt={2}>
          <strong>Output:</strong><br />
          5 x 1 = 5 <br />
          5 x 2 = 10 <br />
          5 x 3 = 15 <br />
          ...<br />
          5 x 10 = 50
        </Typography>

        <Typography variant="h6" gutterBottom color="secondary">
          ЁЯУЪ Example: Array Iteration
        </Typography>

        <Typography sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }} >
{`let array_var = [12, 234, 45];
for(let index = 0; index < array_var.length; index++) {
  document.write('Array Key: ' + index + ', Value: ' + array_var[index] + '<br>');
}`}
        </Typography>

        <Typography paragraph mt={2}>
          <strong>Output:</strong><br />
          Array Key: 0 , Value: 12 <br />
          Array Key: 1 , Value: 234 <br />
          Array Key: 2 , Value: 45
        </Typography>

        <Typography paragraph>
          рдЗрд╕ example рдореЗрдВ <code>length</code> рдПрдХ predefined JavaScript property рд╣реИ рдЬрд┐рд╕рдХрд╛ рдЙрдкрдпреЛрдЧ Array, String рдЖрджрд┐ рдХреА length рдЬрд╛рдирдиреЗ рдореЗрдВ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред
        </Typography>

        <Typography variant="h6" gutterBottom color="secondary">
          ЁЯФД Nested For Loop
        </Typography>

        <Typography paragraph>
          рдЬреИрд╕реЗ рд╣рдо nested if else рдпрд╛ nested while loop рдпреВрдЬрд╝ рдХрд░рддреЗ рд╣реИрдВ, рд╡реИрд╕реЗ рд╣реА <strong>nested for loop</strong> рднреА рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВред
        </Typography>

        <Typography sx={{ bgcolor: '#8CCDEB', p: 2, borderRadius: 1 ,overflowX:'auto',whiteSpace:'pre' }} >
{`for(let x = 1; x <= 5; x++) {
  for(let y = 1; y <= x; y++) {
    document.write(y + " ");
  }
  document.write("<br>");
}`}
        </Typography>

        <Typography paragraph mt={2}>
          <strong>Output:</strong><br />
          1 <br />
          1 2 <br />
          1 2 3 <br />
          1 2 3 4 <br />
          1 2 3 4 5
        </Typography>

        <Typography paragraph>
          рдЗрд╕ рддрд░рд╣ рд╕реЗ рдЖрдк <strong>JavaScript For Loop</strong> рдХреЛ structured рддрд░реАрдХреЗ рд╕реЗ multiple scenarios рдореЗрдВ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
        </Typography>
      </Box>
    </Box>
  );
};

export default Js_for_loop;
