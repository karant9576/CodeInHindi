import { Box, Typography } from "@mui/material";

const Js_class_prototype_guide = () => {
  return (
    <Box sx={{ p: 2, maxWidth: 1000, mx: "auto" ,mt:'-1px' }}>
      <Typography variant="h5" fontWeight="bold" gutterBottom color="primary">
        JavaScript Class ‡§î‡§∞ Prototype ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó
      </Typography>

      <Typography paragraph>
        JavaScript ‡§Æ‡•á‡§Ç ‡§ú‡•à‡§∏‡•á ‡§π‡§Æ Function Constructor ‡§ï‡•á ‡§∏‡§æ‡§• <strong>prototype</strong> ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§µ‡•à‡§∏‡•á ‡§π‡•Ä <strong>Class</strong> ‡§ï‡•á ‡§∏‡§æ‡§• ‡§≠‡•Ä prototype ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§á‡§∏‡§∏‡•á ‡§π‡§Æ class ‡§Æ‡•á‡§Ç <strong>dynamically properties ‡§î‡§∞ methods</strong> ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§∏‡§≠‡•Ä instances ‡§ï‡•á ‡§≤‡§ø‡§è accessible ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üîπ Class Prototype Example
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto' }}>
{`class Animal {
  constructor(name) {
    this.name = name;
  }

  speak() {
    console.log(\`\${this.name} makes a sound.\`);
  }
}

const animal = new Animal("Generic Animal");
animal.speak(); // Output: Generic Animal makes a sound.

// Add method using prototype
Animal.prototype.move = function(distance) {
  console.log(\`\${this.name} moves \${distance} meters.\`);
};

animal.move(10); // Output: Generic Animal moves 10 meters.`}
      </Typography>

      <Typography paragraph mt={2}>
        ‚ö†Ô∏è ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç: ‡§Ü‡§™ instance (‡§ú‡•à‡§∏‡•á <code>animal</code>) ‡§™‡§∞ prototype add ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á‡•§ ‡§Ø‡•á ‡§ï‡•á‡§µ‡§≤ constructor function ‡§Ø‡§æ class ‡§™‡§∞ ‡§π‡•Ä add ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à:
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto'}}>
{`animal.prototype.move = function() {} // ‚ùå Error: animal.prototype is undefined`}
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom mt={2} color="secondary">
        üîπ Add Properties Using Prototype
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto'}}>
{`class User {}

const user = new User();

console.log(user.first_name); // undefined

// Add properties via prototype
User.prototype.first_name = "John";
User.prototype.last_name = "Doe";

// Add method
User.prototype.printName = function() {
  console.log(\`Hey ! \${this.first_name} \${this.last_name}\`);
};

user.printName(); // Output: Hey ! John Doe`}
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom mt={2} color="secondary">
        ‚ö†Ô∏è Arrow Function Warning
      </Typography>

      <Typography paragraph>
        Arrow functions ‡§Æ‡•á‡§Ç <code>this</code> lexical ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è ‡§á‡§®‡•ç‡§π‡•á‡§Ç prototype methods ‡§Æ‡•á‡§Ç ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è:
      </Typography>

      <Typography component="pre" sx={{ bgcolor: "#8CCDEB", p: 2, borderRadius: 1 ,overflowX:'auto' }}>
{`User.prototype.printAddress = () => {
  console.log(\`Address: \${this.userAddress}\`);
};

user.printAddress(); // Output: Address: undefined`}
      </Typography>

      <Typography paragraph mt={2}>
        ‡§á‡§∏‡§ï‡§æ ‡§ï‡§æ‡§∞‡§£ ‡§Ø‡§π ‡§π‡•à ‡§ï‡§ø arrow functions <code>this</code> ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á surrounding lexical context ‡§∏‡•á inherit ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‚Äî ‡§µ‡•ã current object ‡§ï‡•ã refer ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§
      </Typography>

      <Typography variant="h6" fontWeight="bold" gutterBottom color="secondary">
        üî∏ Why is Prototype Important?
      </Typography>

      <Typography component="ul" sx={{ pl: 3 }}>
        <li>Prototype ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä class ‡§ï‡•ã ‡§¨‡§ø‡§®‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ define ‡§ï‡§ø‡§è methods ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§</li>
        <li>‡§Ø‡§π ‡§∏‡§≠‡•Ä object instances ‡§Æ‡•á‡§Ç shared ‡§∞‡§π‡§§‡§æ ‡§π‡•à, memory-efficient ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§</li>
        <li>‡§°‡§æ‡§Ø‡§®‡§æ‡§Æ‡§ø‡§ï behavior add ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ideal ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§π‡•à‡•§</li>
      </Typography>

      <Typography mt={2}>
        ‚≠ê <strong>Conclusion:</strong> ‡§Ö‡§¨ ‡§Ü‡§™ ‡§∏‡§Æ‡§ù ‡§ö‡•Å‡§ï‡•á ‡§π‡•ã‡§Ç‡§ó‡•á ‡§ï‡§ø JavaScript ‡§Æ‡•á‡§Ç Class Prototypes ‡§ï‡§æ use ‡§ï‡•à‡§∏‡•á ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§Ø‡§π powerful feature ‡§π‡•à‡•§
      </Typography>
    </Box>
  );
};

export default Js_class_prototype_guide;
